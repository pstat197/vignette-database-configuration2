---
title: "Databases and Queries in MySQL"
format: pdf
editor: visual
author: Ankur Malik, Haotian Xia, Haoming Deng, Jennifer Park, Russel Liu 
---

## ABSTRACT:

summary:

## DATA:

Write about data set...

## Installing the MySQL Server

1.  Download MySQL Community Server 8.0.31 from <https://dev.mysql.com/downloads/mysql/>. Be sure to select the correct operating system and processor for your computer. For Macbook M1/M2, it is macOS 12 (ARM, 64-bit), DMG Archive. You can start the download without creating an Oracle Web Account.

![](img/install_1.jpg)

2.  Once the download is complete, open mysql-8.0.31-macos12-arm64.dmg. This file can be found either in the downloads toolbar at the bottom your browser window (Google Chrome) or in the 'Downloads' folder of your computer. In the subsequent window, click on the icon for mysql-8.0.31-macos12-arm64.pkg and allow the package to run its program.

![](img/install_2.jpg) ![](img/install_3.jpg)

3.  Follow the installation steps in the 'Install MySQL 8.0.31 Community' window. At the 'Configuration' step (in the sidebar below), the installer will prompt you to assign a password to an initial 'root' account. Remember this password for configuring your database later. When the installation has completed successfully, you may move the installer to Trash.

![](img/install_4.jpg) ![](img/install_5.jpg)

4.  To check the installation, open System Settings (a.k.a System Preferences) and click on the MySQL icon at the bottom of the navigation bar. You can see whether the MySQL server is running.

![](img/install_8.jpg)

5.  After MySQL has been installed this way, you might still have to configure the path to the MySQL server. In other words, you want to be able to start up the MySQL shell from the command line by running `$ mysql` (don't type the $). When you open terminal, your default interactive shell automatically executes a hidden configuration file located in your home directory that contains commands to do a number of things upon login, such as adding a directory to ```$PATH`, exporting some variable, and customizing the shell session (`.bash_profile`for`bash`,`.zprofile`for`zsh\`\`\`, etc. for related shells).

We want to add `export PATH=$PATH:/usr/local/<your_mysql_folder>/bin` to the end of the .bash_profile file so that your shell can find the path to MySQL on your machine and open a MySQL shell.

-   `export` is a built-in command that sets an environment variable to be exported to child-processes, so that the child inherits them. For example:

<!-- -->

    $ foo=bar
    $ bash -c 'echo $foo'

    $ export foo
    $ bash -c 'echo $foo'
    bar

-   The PATH before = is a variable name and the combination tells bash to store the stuff behind the = in the variable.
-   The \$PATH is the value of the variable PATH up until then.
-   The combination PATH="\$PATH:some_path_to_stuff" extends the PATH variable. In bash this is a colon (:) separated list.

So first, find the path to MySQL. By default, the MySQL directories are installed under /usr/local/. On MacOS, find '/usr/local/mysql' using Spotlight (Cmd + Space and enter it into the search bar) and open the folder e.g. mysql-8.0.31-macos12-arm64. Right click on the 'bin' folder, hold the Option key, and click 'Copy "bin" Pathname' to copy the path.

Then, run the following commands in your terminal to open .bash_profile.

    $ ls -a                 # list all the files in your home directory with 
                              # the -a option to include  hidden files.
    $ touch .bash_profile   # if you don't see it listed, you can create one
    $ ls -a                 # check that it's there now
    $ open -t .bash_profile # open the text file. The -t option will open it with 
                              # your default text editor.

Lastly, add `export PATH=$PATH:<paste_your_mysql_path_here>` e.g. `export PATH=$PATH:/usr/local/mysql-8.0.31-macos12-arm64/bin` to the end of your .bash_profile.

    export PATH=$PATH:/usr/local/<your_mysql_folder>/bin 

To save and exit, you should just be able to Cmd + s to save and close the window.

6.  Now, you should be able to connect to MySQL from the command line. This command invokes mysql without specifying any explicit connection parameters:

<!-- -->

    $ mysql

Because there are no parameter options, the default values apply:

-   The default host name is localhost.
-   The default user name is ODBC on Windows, your Unix login name on Unix, and root on MacOS.
-   No password is sent because neither --password nor -p is given. If all your users have passwords, you may get an error that looks something like this:

<!-- -->

    ERROR 1045 (28000): Access denied for user 'USERNAME'@'localhost' (using password: NO)

-   The first nonoption argument is taken as the name of the default database. Because there is no such argument, mysql selects no default database.

7.  To specify the host name and user name explicitly, as well as a password, supply appropriate options on the command line. To select a default database, add a database-name argument.

<!-- -->

    mysql --host=HOSTNAMEorIP --user=USERNAME --password=PASSWORD DATABASENAME
    mysql -h HOSTNAMEorIP -u USERNAME -pPASSWORD DATABASENAME

The options above mean:

    --host or -h: host machine or IP address running the server
    --user or -u: username
    --password or -p: password (**no space between -p and the password text**). To avoid security risk, specify this option without any following password value and you will prompted to enter the password after you run the command.
    - the first non-option argument is name of the database that you want to connect.

For the example in this vignette, you can try using the MySQL command line to see that 'bikes' is in the list of all databases, and then exit to your default terminal.

    $ mysql -u root -p
    Enter password: <YOUR ROOT PASSWORD>
    Welcome to the MySQL monitor.  Commands end with ; or \g.
    Your MySQL connection id is 161
    Server version: 8.0.31 MySQL Community Server - GPL

    Copyright (c) 2000, 2022, Oracle and/or its affiliates.

    Oracle is a registered trademark of Oracle Corporation and/or its
    affiliates. Other names may be trademarks of their respective
    owners.

    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

    mysql> show databases;
    +--------------------+
    | Database           |
    +--------------------+
    | bikes              |
    | information_schema |
    | mysql              |
    | performance_schema |
    | sys                |
    +--------------------+
    5 rows in set (0.06 sec)

    mysql> exit
    Bye

# Installing MySQL Workbench

1.  Download MySQL Workbench 8.0.31 from <https://dev.mysql.com/downloads/workbench/>. Be sure to select the correct operating system and processor for your computer. For Macbook M1/M2, please select macOS (x86, 64-bit), DMG Archive. You can start the download without creating an Oracle Web Account.

![](img/install_9.jpg)

![](img/install_10-01.jpg)

2.  Once the download is complete, open mysql-workbench-community-8.0.31-macos-x86_64. This file can be found either in the downloads toolbar at the bottom your browser window (Google Chrome) or in the 'Downloads' folder of your computer. In the subsequent window, click on the icon for mysql-8.0.31-macos12-arm64.pkg and allow the package to run its program. Then, you can drag MySQLWorkbench into the Applications Icon to complete the installation.

![](img/install_11-01.jpg)

3.  Once the installation is complete, open the MySQLWorkbench. Click the database button at the upper left corner and then click the "Connect to Database".

![](img/install_12.jpg)

4.  Then, you need to click "store in Keychain" and enter the password you set when you download the MySQL server. Now, you successfully connect to the database from MySQLWorkbench.

![](img/install_13.jpg)

![](img/install_14.jpg)

![](img/install_15.jpg)

## WHAT ARE Queries, SQL, MySQL:

**What is a Query? What is a SQL? What is MySQL?**

A **query** is a statement which enables us to extract data or information from a particular database table. We are writing a statement or command which allows us to extract a specific piece of information from our database. Now you may wonder what a database is? A **database** is the collection of structured data stored within a computer system. We use database management systems (*DBMS*) to control a database.

**SQL** is an acronym for *standard query language*. SQL is considered to be a programming language which can be used to manipulate, query, access, and control a database or table.

In this project, we are focusing on a specific kind of SQL called MySQL**. MySQL** is defined a relational database management system based on SQL. It differs from other versions of SQL primarily based on syntax, functionality, and purpose.

## MySQL Functions:

**Function:** WHERE

**Purpose:** It is used to filter records based on a specific condition

```{r}
# Selecting an instant from the day database wehre the temp is 0.3441670 and limit it to 2 outputs 
dbGetQuery(mydb, "SELECT instant FROM day where temp = 0.3441670 LIMIT 2" ) 
```

**Function:** ORDER BY

**Purpose:** It is used to sort the result-set in ascending or descending order.

```{r}
# Selecting the temperature from the day database and ordering our ouput by season in Ascending order with a limit of 3 ouputs 
dbGetQuery(mydb, "SELECT temp FROM day ORDER BY season ASC LIMIT 3" ) # Ascending Order
# Selecting the temperature from the day database and ordering our ouput by season in Descending order with a limit of 3 ouputs 
dbGetQuery(mydb, "SELECT temp FROM day ORDER BY season DESC LIMIT 3" ) # Descending Order
```

**Function:** LIMIT

**Purpose:** It is used to select a limited number of records.

```{r}
#Select the date from the day database where the tempeature is greater than 0 and limiting it to 5 outputs
dbGetQuery(mydb, "SELECT dteday FROM day where temp > 0 LIMIT 5" )  
```

**Function:** LEFT JOIN

**Purpose:** Left Join returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.

```{r}
# Selecting windspeed from the day database and casual from the hour database and left joining all the attributes on season from the day and hour database and limiting it to 2 outputs
dbGetQuery(mydb, 'SELECT day.windspeed, hour.casual FROM day LEFT JOIN hour ON day.season = hour.season LIMIT 2')
```

**Function:** RIGHT JOIN

**Purpose:** Right Join returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.

```{r}
# Selecting windspeed from the day database and casual from the hour database and right joining all the attributes on season from the day and hour database and limiting it to 2 outputs
dbGetQuery(mydb, 'SELECT day.windspeed, hour.casual FROM day RIGHT JOIN hour ON day.season = hour.season LIMIT 2')
```

**Function:** INNER JOIN

**Purpose:** Inner Join selects records that have matching values in both tables.

```{r}
# Selecting windspeed from the day database and casual from the hour database and inner joining all the attributes on season from the day and hour database and limiting it to 2 outputs
dbGetQuery(mydb, 'SELECT day.windspeed, hour.casual FROM day INNER JOIN hour ON day.season = hour.season LIMIT 2')
```

**Function:** OUTER JOIN/ FULL JOIN

**Purpose:** Outer Join keyword returns all records when there is a match in left (table1) or right (table2) table records.

```{r}
# dbGetQuery(mydb, 'SELECT day.season, hour.casual FROM day FULL JOIN hour ON day.season = hour.season LIMIT 5')
# Selecting all the attributes from day and hour database where there is a match
dbGetQuery(mydb, "SELECT day.windspeed, hour.casual FROM day LEFT JOIN hour ON day.season = hour.season UNION 
           SELECT day.windspeed, hour.casual FROM day RIGHT JOIN hour ON day.season = hour.season LIMIT 5")
```

**Function:** UNION

**Purpose:** We use the union operator to combine the result-set of two or more SELECT statements.

```{r}
# We are selecting cnt from the day database and also selecting temperature from the hour database and using union to combine both select statements with a limit of 2 outputs
dbGetQuery(mydb, "SELECT day.cnt FROM day UNION SELECT temp FROM hour LIMIT 2")
```

**Function:** IN

**Purpose:** The in operator allows you to specify multiple values in a where clause or shorthand for multiple or conditions

```{r}
# Selecting attributes from the day database where season in the select season from the day database and limit output to 5     
dbGetQuery(mydb, "SELECT* FROM day WHERE season IN (SELECT season FROM day) LIMIT 5")
```

**Function:** LIKE

**Purpose:** The like operator is used in a where clause to search for a specified pattern in a column. We use the percent operator (%) to represent 0, 1, or multiple characters. The underscore ( \_ ) represents a single character.

```{r}
# Selecting temp and season from the day database where the date... and limit to 4 outputs
dbGetQuery(mydb, "SELECT temp,season FROM day WHERE dteday LIKE '%2' LIMIT 4") # End in 2
dbGetQuery(mydb, "SELECT temp,season FROM day WHERE dteday LIKE '2%' LIMIT 4") # Start with 2 
dbGetQuery(mydb, "SELECT temp,season FROM day WHERE dteday LIKE '%2%' LIMIT 4") # Has 2 in it 
dbGetQuery(mydb, "SELECT temp,season FROM day WHERE dteday LIKE '2%2' LIMIT 4") # Start with 2 and ends in 2

```

**Function:** BETWEEN

**Purpose:** The between operator selects values within a given range. The values can be numbers, text, or dates.

```{r}
#Select the date and atemp from day where the temp is between 0 and 1 and limit to 5 outputs
dbGetQuery(mydb, "SELECT dteday, atemp FROM day where temp BETWEEN 0 AND 1 LIMIT 5" )  

```

**Function:** GROUP BY

**Purpose:** The group by statement groups rows that have the same values into summary rows

```{r}
# Select the number of season from day database and group by date the output and order by the count of the season in descending order and limit to 2 outputs
dbGetQuery(mydb, "SELECT COUNT(season) FROM day GROUP BY dteday ORDER BY COUNT(season) DESC LIMIT 2")
```

**Function:** HAVING

**Purpose:** The having clause was added to SQL because the where keyword cannot be used with aggregate functions.

```{r}
# Select the date from the day database and group by date having the count of the temperatures being greater than 0.2 and limit to 5 outputs
dbGetQuery(mydb, "SELECT dteday FROM day GROUP BY dteday HAVING COUNT(temp) > 0.2 LIMIT 5" ) 
```

**Function:** CASE

**Purpose:** expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the else clause.

```{r}
# Select windspeed and when the windspeed is less than 0.1 output low else Null
dbGetQuery(mydb, "SELECT windspeed, CASE 
            WHEN windspeed < 0.1 THEN 'LOW'
            ELSE NULL
            END AS CHECK_LOWSPEED FROM day")
```

**Function:** DISTINCT

**Purpose:** The distinct statement is used to return only distinct (different) values

```{r}
# Select distinct date from day where the temp is 0.3441670
dbGetQuery(mydb, "SELECT DISTINCT(dteday) FROM day where temp = 0.3441670" ) 
dbGetQuery(mydb, "SELECT DISTINCT(windspeed) FROM day where temp = 0.1" ) # Value Does not Exist
```

## Works Cited:

1.  MySQL Installation Guide: <https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/>
2.  MySQL Server Configuration Guide: <https://www.youtube.com/watch?v=nj3nBCwZaqI>
3.  MySQL Workbench Installation Guide: <https://www.youtube.com/watch?v=6FvvWhiZyDY>
4.  Colburn, Rafe. Special Edition Using SQL. Que, 2000.
5.  Röhm, Uwe, et al. "SQL for Data Scientists: Designing SQL Tutorials for Scalable Online Teaching." Proceedings of the VLDB Endowment, vol. 13, no. 12, 2020, pp. 2989--92, https://doi.org/10.14778/3415478.3415526.
6.  Guo, Aibo, et al. "ER-SQL: Learning Enhanced Representation for Text-to-SQL Using Table Contents." Neurocomputing (Amsterdam), vol. 465, 2021, pp. 359--70, https://doi.org/10.1016/j.neucom.2021.08.134.
7.  Guo, Aibo, et al. "ER-SQL: Learning Enhanced Representation for Text-to-SQL Using Table Contents." Neurocomputing (Amsterdam), vol. 465, 2021, pp. 359--70, https://doi.org/10.1016/j.neucom.2021.08.134.
8.  Reese, George., et al. Managing and Using MySQL. 2nd ed., O'Reilly, 2002.\
